{"version":3,"sources":["logo.svg","components/Grid.js","components/Time.js","components/AppBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","margin","spacing","paper","padding","textAlign","color","palette","text","secondary","CenteredGrid","props","classes","useState","setText","className","Grid","container","item","xs","Paper","hour","width","noValidate","autoComplete","TextField","id","label","disabled","BasicTextFields","Button","variant","onClick","Clock","state","date","moment","format","this","timerID","setInterval","tick","clearInterval","setState","React","Component","menuButton","marginRight","title","App","AppBar","position","Toolbar","Typography","ButtonAppBar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.413e9ac9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\nlet useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    \"& > *\": {\n      margin: theme.spacing(1),\n    }\n  },\n  paper: {\n    padding: theme.spacing(0),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function CenteredGrid(props) {\n  let classes = useStyles();\n  const [textInput, setTextInput] = useState(\"\");\n  const [text, setText] = useState(\"Save\");\n\n\n  function handleClick() {\n    if (text === \"Save\") {\n      setText(\"Edit\")\n    } else {\n      setText(\"Save\")\n    }\n  }\n\n  function ContainedButtons() {\n    return (\n      <Grid item xs={3}>\n        <Paper className={classes.paper}>\n          <div className={classes.root}>\n            <Button variant=\"contained\" onClick={() => handleClick()}>{text}</Button>\n          </div>\n        </Paper>\n      </Grid>\n    );\n  }\n\n  function BasicTextFields() {\n    let useStyles = makeStyles((theme) => ({\n      root: {\n        flexGrow: 1,\n        \"& > *\": {\n          margin: theme.spacing(1),\n          width: \"100ch\"\n        }\n      },\n      paper: {\n        padding: theme.spacing(0),\n        textAlign: \"center\",\n        color: theme.palette.text.secondary,\n      },\n    }));\n\n    let classes = useStyles();\n\n    if (text === \"Save\") {\n      return (\n        <Grid item xs={6}>\n          <Paper Paper className={classes.paper}>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n              <TextField id=\"standard-basic\" label=\"Write Task Here\" />\n            </form>\n          </Paper>\n        </Grid>\n      );\n    } else {\n      return (\n        <Grid item xs={6}>\n          <Paper Paper className={classes.paper}>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n              <TextField disabled id=\"standard-basic\" label=\"Write Task Here\" />\n            </form>\n          </Paper>\n        </Grid>\n      )\n    }\n\n  }\n\n  return (\n    <div className={classes.root}>\n        <Grid\n          container spacing={0}\n          container={true}\n          item\n          direction={\"row\"}\n          justify={\"flex-start\"}\n        >\n          <Grid item xs={3}>\n            <Paper className={classes.paper}>\n              <h1>{props.hour}</h1>\n            </Paper>\n          </Grid>\n          {BasicTextFields()}\n          {ContainedButtons()}\n        </Grid>\n    </div>\n  );\n}\n","import React  from 'react';\nimport moment from 'moment';\n\nexport default class Clock extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {date: moment().format('MMMM Do YYYY, h:mm:ss a')};\n    }\n  \n    componentDidMount() {\n      this.timerID = setInterval(\n        () => this.tick(),\n        1000\n      );\n    }\n  \n    componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n  \n    tick() {\n      this.setState({\n        date: moment().format('MMMM Do YYYY, h:mm:ss a')\n      });\n    }\n  \n    render() {\n      return (\n        <div>\n          <h2>It is {this.state.date}.</h2>\n        </div>\n      );\n    }\n  }","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Clock from './Time.js'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            <Clock />\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./components/Grid.js\";\nimport CenteredGrid from \"./components/Grid.js\";\nimport ButtonAppBar from \"./components/AppBar.js\";\n\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      {ButtonAppBar()}\n      <CenteredGrid hour=\"9am\"/>\n      <CenteredGrid hour=\"10am\"/>\n      <CenteredGrid hour=\"11am\"/>\n      <CenteredGrid hour=\"12pm\"/>\n      <CenteredGrid hour=\"1pm\"/>\n      <CenteredGrid hour=\"2pm\"/>\n      <CenteredGrid hour=\"3pm\"/>\n      <CenteredGrid hour=\"4pm\"/>\n      <CenteredGrid hour=\"5pm\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}